# ApolloCrossDev Makefile template for GCC-6.50 v0.8
# 10-2-2024
# Willem Drijver

# Define Shell Environment
PWD = $(shell pwd)
DIR = $(notdir $(shell pwd))

# Define ApolloCrossDev
PREFIX 	= $(PWD)/../../Compilers/GCC-6.50-Stable/ApolloCrossDev
TARGET 	= m68k-amigaos

# Define C-Compiler (C = Default, change comments to change to C++)
C_COMPILER	= $(PREFIX)/bin/m68k-amigaos-gcc
# C_COMPILER	= $(PREFIX)/bin/m68k-amigaos-g++

# Define C-Library (LibNix = Default, change comments to change to Clib2 or C++)
C_LIB 		= -noixemul
# C_LIB = -mcrt=clib2

C_INCL_CLB	= $(PREFIX)/$(TARGET)/libnix/include
# C_INCL_CLB  = $(PREFIX)/$(TARGET)/clib2/include
# C_INCL_CLB  = $(PREFIX)/lib/gcc/m68k-amigaos/6.5.0b/include

C_INCL		= $(PREFIX)/$(TARGET)/include
C_INCL_SYS	= $(PREFIX)/$(TARGET)/sys-include
C_INCL_NDK	= $(PREFIX)/$(TARGET)/ndk-include
C_INCL_SDL  = $(PREFIX)/$(TARGET)/include/SDL
C_INCL_MUI  = $(PREFIX)/$(TARGET)/include/mui
C_INCL_ALL 	= -I$(C_INCL_CLB) -I$(C_INCL) -I$(C_INCL_SYS) -I$(C_INCL_NDK) -I$(C_INCL_SDL) -I$(C_INCL_MUI)

C_LIBS_CLB	= $(PREFIX)/$(TARGET)/libnix/lib
# C_LIBS_CLB = $(PREFIX)/$(TARGET)/clib2/lib
C_LIBS_ALL	= -L$(C_LIBS_CLB)

# Define C Options
C_OPTIONS = -O2 -m68080 -m68881 -fomit-frame-pointer -ffast-math -DREGPARM=4 -DM68K=1 -w -lmui
C_FLAGS = $(C_LIB) $(C_OPTIONS) $(C_INCL_ALL) $(C_LIBS_ALL)

# Define ASM Compiler
S_COMPILER = $(PREFIX)/bin/vasmm68k_mot

# Define ASM Includes
S_INCLUDE = $(PREFIX)/$(TARGET)/include

# Define ASM Options
S_FLAGS = -Fhunk -m68080 -m68881 -opt-speed -I$(S_INCLUDE)

# Define Object Linker
O_LINKER = $(PREFIX)/bin/m68k-amigaos-gcc

# Define Source and Object Directory
C_SOURCEDIR = .
S_SOURCEDIR = .
C_OBJECTDIR = .
S_OBJECTDIR = .

# Define Object Filelist
C_FILES = $(wildcard $(C_SOURCEDIR)/*.c)
S_FILES = $(wildcard $(S_SOURCEDIR)/*.s)
O_FILES = $(patsubst $(C_SOURCEDIR)/%.c,$(C_OBJECTDIR)/%.o,$(C_FILES)) $(patsubst $(S_SOURCEDIR)/%.s,$(S_OBJECTDIR)/%.o,$(S_FILES))

# Define Executable Name
EXE = $(DIR)-gcc650

# Make Project (Init -> Build -> Clean -> Exit)
all: init clean build exit

# Build Executable
build: $(EXE)

# Link all Objects from Filelist together
$(EXE) : $(O_FILES) 
	$(O_LINKER) $(C_FLAGS) $(O_FILES) -o $(EXE) >>log-650.txt 2>>log-err-650.txt

# Compile all C-Sources to Objects 
$(C_OBJECTDIR)/%.o : $(C_SOURCEDIR)/%.c
	$(C_COMPILER) -c $(C_FLAGS) -o $@ $< >>log-650.txt 2>>log-err-650.txt

# Compile all ASM-Sources to Objects
$(S_OBJECTDIR)/%.o : $(S_SOURCEDIR)/%.s
	$(S_COMPILER) $(S_FLAGS) -o $@ $< >>log-650.txt 2>>log-err-650.txt

# Clean Project
clean:
	rm -f $(C_OBJECTDIR)/*.o $(S_OBJECTDIR)/*.o log*.txt $(EXE) log-650.txt log-err-650.txt

.phony: init

init:
	clear
	@echo "\e[37m---------------------------------\e[0m"
	@echo "\e[1;31mApollo\e[1;30mCrossDev \e[37mGCC-6.50-Stable Edition v0.8\e[0m"    
	@echo "\e[36mC-Sources : \e[37m$(C_FILES)\e[0m"
	@echo "\e[36mS-Sources : \e[37m$(S_FILES)\e[0m"
	@echo "\e[36mExecutable: \e[37m$(EXE)\e[0m"
	@echo "\e[37m---------------------------------\e[30m"
		
exit:
	@echo "\e[37m---------------------------------\e[0m"
	@echo "\e[1;31mApollo\e[1;30mCrossDev \e[32mCompile Successful\e[0m"
	@echo "\e[37m---------------------------------\e[0m"
	@echo " "
